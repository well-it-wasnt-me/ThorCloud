package vulnerability

import (
	"fmt"

	"github.com/Zeus-Labs/ZeusCloud/rules/types"
	"github.com/neo4j/neo4j-go-driver/v4/neo4j"
)

type Vulnerability struct {
	Name           string  `json:"name,omitempty"`
	CveIdentifier  string  `json:"cve_identifier,omitempty"`
	CvssScore      float64 `json:"cvss_score,omitempty"`
	CveDescription string  `json:"description,omitempty"`
	YamlTemplate   string  `json:"yaml_template,omitempty"`
}

func (v Vulnerability) UID() string {
	return v.CveIdentifier
}

func (v Vulnerability) Description() string {
	return v.CveDescription
}

func (v Vulnerability) Severity() types.Severity {
	switch {
	case v.CvssScore < 4:
		return types.Low
	case v.CvssScore >= 4 && v.CvssScore < 7:
		return types.Moderate
	case v.CvssScore >= 7 && v.CvssScore < 9:
		return types.High
	case v.CvssScore >= 9:
		return types.Critical
	default:
		return "Unknown"
	}
}

func (Vulnerability) RiskCategories() types.RiskCategoryList {
	return []types.RiskCategory{
		types.Vulnerability,
	}
}

func (v Vulnerability) Execute(tx neo4j.Transaction) ([]types.Result, error) {
	params := map[string]interface{}{
		"id": v.CveIdentifier,
	}
	records, err := tx.Run(
		`MATCH (rnode)-[HAS_VULNERABILITY]->(cve:CVE {template_id:$id})
		MATCH (a:AWSAccount{inscope: true})-[:RESOURCE]->(rnode)
		return a.id as account_id,
		CASE
			WHEN "EC2Instance" IN labels(rnode) THEN "EC2Instance"
			WHEN "LoadBalancerV2" IN labels(rnode) THEN "LoadBalancerV2"
			WHEN "RDSInstance" IN labels(rnode) THEN "RDSInstance"
			ELSE "Unknown"
		END as resource_type,
		CASE
			WHEN "EC2Instance" IN labels(rnode) THEN rnode.id
			WHEN "LoadBalancerV2" IN labels(rnode) THEN rnode.id
			WHEN "RDSInstance" IN labels(rnode) THEN rnode.arn
			ELSE "Unknown"
		END as resource_id,
		"failed" as status,
		"Nuclei scan results for " + cve.template_id + " cve" as context`,
		params)

	if err != nil {
		return nil, err
	}
	var results []types.Result
	for records.Next() {
		record := records.Record()
		resourceID, _ := record.Get("resource_id")
		resourceIDStr, ok := resourceID.(string)
		if !ok {
			return nil, fmt.Errorf("resource_id %v should be of type string", resourceID)
		}
		resourceType, _ := record.Get("resource_type")
		resourceTypeStr, ok := resourceType.(string)
		if !ok {
			return nil, fmt.Errorf("resource_type %v should be of type string", resourceType)
		}
		accountID, _ := record.Get("account_id")
		accountIDStr, ok := accountID.(string)
		if !ok {
			return nil, fmt.Errorf("account_id %v should be of type string", accountID)
		}
		status, _ := record.Get("status")
		statusStr, ok := status.(string)
		if !ok {
			return nil, fmt.Errorf("status %v should be of type string", status)
		}
		context, _ := record.Get("context")
		contextStr, ok := context.(string)
		if !ok {
			return nil, fmt.Errorf("context %v should be of type string", context)
		}
		results = append(results, types.Result{
			ResourceID:   resourceIDStr,
			ResourceType: resourceTypeStr,
			AccountID:    accountIDStr,
			Status:       statusStr,
			Context:      contextStr,
		})
	}

	return results, nil
}

func (Vulnerability) ProduceRuleGraph(tx neo4j.Transaction, resourceId string) (neo4j.Result, error) {
	return nil, nil
}
