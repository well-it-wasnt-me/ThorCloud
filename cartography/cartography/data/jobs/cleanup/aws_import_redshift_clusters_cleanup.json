{
  "statements": [
    {
      "query": "MATCH (n:RedshiftCluster)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID}) WHERE n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n)",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Delete RedshiftClusters that no longer exist and DETACH them from all nodes they were previously connected to."
    },
    {
      "query": "MATCH (:RedshiftCluster)<-[r:RESOURCE]-(:AWSAccount{id: $AWS_ID}) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r)",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "If a RedshiftCluster still exists but is no longer associated with its old AWS Account, delete the relationship between them."
    },
    {
      "query": "MATCH (:EC2SecurityGroup)<-[r:MEMBER_OF_EC2_SECURITY_GROUP]-(:RedshiftCluster)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID}) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r)",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "If a RedshiftCluster still exists and is no longer a part of its old EC2SecurityGroup, delete the relationship between them."
    },
    {
      "query": "MATCH (:AWSPrincipal)<-[r:STS_ASSUME_ROLE_ALLOW]-(:RedshiftCluster)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID}) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r)",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "If a RedshiftCluster still exists but can no longer assume a previously set IAM role, delete the relationship between them."
    },
    {
      "query": "MATCH (:AWSVpc)<-[r:MEMBER_OF_AWS_VPC]-(:RedshiftCluster)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID}) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r)",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Delete stale relationships between RedshiftClusters and VPCs."
    }
  ],
  "name": "cleanup RedshiftCluster"
}
