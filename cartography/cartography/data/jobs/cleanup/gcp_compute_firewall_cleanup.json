{
  "statements": [
    {
      "query": "MATCH (n:GCPFirewall) WHERE n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n)",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Delete GCP Firewalls that no longer exist and detach them from all previously connected nodes."
    },
    {
      "query": "MATCH (:GCPFirewall)<-[r:RESOURCE]-(:GCPVpc) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r)",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP VPC-to-Firewall relationships that are out of date."
    },
    {
      "query": "MATCH (:GCPFirewall)-[r:HAS_TARGET_TAG]-(:GCPTag) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r)",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP Firewall-to-Tag relationships that are out of date. Deleting the tag itself is taken care of in GCP instance cleanup."
    },
    {
      "query": "MATCH (n:GCPIpRule) WHERE n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n)",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Delete GCP Ip Rules that no longer exist and detach them from all previously connected nodes."
    },
    {
      "query": "MATCH (:GCPFirewall)<-[r:ALLOWED_BY|DENIED_BY]-(:GcpIpRule) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r)",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP Firewall-to-IpRule relationships that are out of date."
    },
    {
      "query": "MATCH (:GCPIpRule)<-[r:MEMBER_OF_IP_RULE]-(:IpRange) WHERE r.lastupdated <> $UPDATE_TAG WITH r LIMIT $LIMIT_SIZE DELETE (r)",
      "iterative": true,
      "iterationsize": 100,
      "__comment__": "Remove GCP IpRule-to-IpRange relationships that are out of date."
    }
  ],
  "name": "cleanup GCP Instances"
}
