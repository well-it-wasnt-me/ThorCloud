{
    "statements": [
        {
            "query": "MATCH (n:S3Bucket)<-[:DELIVERS_TO]-(:CloudTrail)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID}) WHERE NOT (n)<-[:RESOURCE]-(:AWSAccount) AND n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n)",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete stale S3 Buckets delivery points that are not a resource of an account in the graph. (The S3 cleanup job will be responsible for the bucket otherwise.)"
        },
        {
            "query": "MATCH (n:CloudWatchLogGroup)<-[:DELIVERS_TO]-(:CloudTrail)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID}) WHERE NOT (n)<-[:RESOURCE]-(:AWSAccount) AND n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n)",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete stale CloudWatchLogGroup delivery points that are not a resource of an account in the graph. (The Cloudwatch cleanup job will be responsible for the log group otherwise.)"
        },
        {
            "query": "MATCH (n:CloudTrailEventSelector)-[:APPLIES_TO]->(:CloudTrail)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID}) WHERE n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n)",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete old CloudTrailEventSelector nodes."
        },
        {
            "query": "MATCH (n:CloudTrailEventSelector)-[:APPLIES_TO]->(t:CloudTrail)-[:MONITORS]->(:AWSAccount{id: $AWS_ID}) WHERE NOT (t)<-[:RESOURCE]-(:AWSAccount) AND n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n)",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete old CloudTrailEventSelector nodes for trails that are not resources of any AWS account but monitored by this account."
        },
        {
            "query": "MATCH (:S3Bucket)<-[d:DELIVERS_TO]-(:CloudTrail)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID}) WHERE d.lastupdated <> $UPDATE_TAG WITH d LIMIT $LIMIT_SIZE DELETE (d)",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete stale DELIVERS_TO between CloudTrail and S3Bucket."
        },
        {
            "query": "MATCH (:CloudWatchLogGroup)<-[d:DELIVERS_TO]-(:CloudTrail)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID}) WHERE d.lastupdated <> $UPDATE_TAG WITH d LIMIT $LIMIT_SIZE DELETE (d)",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete stale DELIVERS_TO between CloudTrail and CloudWatchLogGroup."
        },
        {
            "query": "MATCH (:CloudTrailEventSelector)-[a:APPLIES_TO]->(:CloudTrail)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID}) WHERE a.lastupdated <> $UPDATE_TAG WITH a LIMIT $LIMIT_SIZE DELETE (a)",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete stale APPLIES_TO between CloudTrail and CloudTrailEventSelector."
        },
        {
            "query": "MATCH (:CloudTrailEventSelector)-[a:APPLIES_TO]->(t:CloudTrail)-[:MONITORS]->(:AWSAccount{id: $AWS_ID}) WHERE NOT (t)<-[:RESOURCE]-(:AWSAccount) AND a.lastupdated <> $UPDATE_TAG WITH a LIMIT $LIMIT_SIZE DELETE (a)",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete stale APPLIES_TO between CloudTrail and CloudTrailEventSelector for trails that are not resources of any AWS account but monitored by this account."
        },
        {
            "query": "MATCH (n:CloudTrail)-[:MONITORS]->(:AWSAccount{id: $AWS_ID}) WHERE NOT (n)<-[:RESOURCE]-(:AWSAccount) AND n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n)",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete old CloudTrail nodes that either that are not resources of any AWS account but monitored by this account."
        },
        {
            "query": "MATCH (:CloudTrail)<-[m:MONITORS]-(:AWSAccount{id: $AWS_ID}) WHERE m.lastupdated <> $UPDATE_TAG WITH m LIMIT $LIMIT_SIZE DELETE (m)",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete stale MONITORS between CloudTrail and AWSAccount."
        },
        {
            "query": "MATCH (n:CloudTrail)<-[:RESOURCE]-(:AWSAccount{id: $AWS_ID}) WHERE n.lastupdated <> $UPDATE_TAG WITH n LIMIT $LIMIT_SIZE DETACH DELETE (n)",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete old CloudTrail nodes that are resources."
        }
    ],
    "name": "cleanup CloudTrail"
}
